global args = [];
global filesystem = builtin_filesystem();

effect exception {
    ctl error(error: String);
}

// ---------------------------------------- API ------------------------------------------ //
fn get_root_path(relative_path: String) {
    // TODO: ./../
    if relative_path[0] == "." {
        relative_path[0] = gcsh_working_directory;
    } else if relative_path[0] == "~" {
        relative_path[0] = gcsh_home_directory;
    }
    return relative_path;
}

fn read_file(path: String) {
    with exception {
        ctl error(_: String) exception {
            error("File not found! Path: '" + path + "'!");
        }
    }

    path = get_root_path(path);
    path[0] = "";

    if len(path) == 0 {
        return filesystem;
    }

    let directory = any;
    directory = filesystem;
    if path[len(path) - 1] == "/" {
        path[len(path) - 1] = "";
    }

    let filename = "";
    for(path, fn (char: String) {
        if char == "/" {
            directory = directory[filename];
            filename = "";
        } else {
            filename = filename + char;
        }
    });
    return directory[filename];
}

// TODO: parse args like -l -la --list and stuff

// ------------------------------------ Interpreter -------------------------------------- //
global gcsh_command = "";
global gcsh_executable = "";
global gcsh_home_directory = "/home";
global gcsh_working_directory = gcsh_home_directory;
let GCSH_CURSOR = "\x1c00ff00 \x18";

fn gcsh_execute() {
    with exception {
        ctl error(error: String) {
            println("\x1bff0000Error: " + error + "\x18");
            resume 0;
        }
    }

    gcsh_command = trim(gcsh_command);
    if len(gcsh_command) > 0 {
        if gcsh_command[0] != "#" {
            let args = [];
            {
                let token = "";
                for(gcsh_command, fn (char: String) {
                    // TODO: String literals
                    if char == " " {
                        args = args + [token];
                        token = "";
                    } else {
                        token = token + char;
                    }
                });
                args = args + [token];
            }

            gcsh_executable = "";
            let bin = filesystem["bin"];
            if contains(bin, args[0]) {
                eval(bin[args[0]]);
            } else {
                println("\x1bff0000Command '" + args[0] + "' not found!\x18");
            }
        } else {
            gcsh_executable = "";
        }
    } else {
        gcsh_executable = "";
    }
}

// --------------------------------------- Shell ----------------------------------------- //
if len(args) > 1 {
    args = remove(args, 0);
    let script = read_file(args[0]);
    gcsh_command = "";
    for(script, fn (char: String) {
        if char == "\n" {
            gcsh_execute();
            gcsh_command = "";
        } else {
            gcsh_command = gcsh_command + char;
        }
    });
    gcsh_execute();
} else {
    if gcsh_executable == "" {
        print("\x1b009092" + gcsh_working_directory + "\x18\n> " + GCSH_CURSOR);
        gcsh_executable = "/bin/gcsh";
        gcsh_command = "";
    } else if gcsh_executable == "/bin/gcsh" {
        let input = input();
        for(GCSH_CURSOR, fn (_: String) { screen_buffer = pop(screen_buffer); });
        if len(input) > 0 {
            if contains(input, "\x08") {
                if len(gcsh_command) > 0 {
                    screen_buffer = pop(screen_buffer);
                    gcsh_command = pop(gcsh_command);
                }
            } else if contains(input, "\n") {
                println();
                gcsh_execute();
                return unit;
            } else {
                gcsh_command = gcsh_command + input;
                print(input);
            }
        }
        screen_buffer = screen_buffer + GCSH_CURSOR;
    } else {
        eval(read_file(gcsh_executable));
    }
}
